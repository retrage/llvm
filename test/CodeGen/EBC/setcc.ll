; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=ebc -verify-machineinstrs < %s \
; RUN:  | FileCheck %s -check-prefix=EBC

define i64 @icmp_eq(i64 %a, i64 %b) nounwind {
; EBC-LABEL: icmp_eq:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r0, r0 (0,-16)
; EBC-NEXT:    push64 r1
; EBC-NEXT:    push64 r2
; EBC-NEXT:    movqw r7, r0 (0,32)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    moviww r7, 1
; EBC-NEXT:    cmp64eq r2, r1
; EBC-NEXT:    jmp64cs LBB0_2
; EBC-NEXT:  ; %bb.1:
; EBC-NEXT:    moviww r7, 0
; EBC-NEXT:  LBB0_2:
; EBC-NEXT:    pop64 r2
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    movqw r0, r0 (0,16)
; EBC-NEXT:    ret
  %1 = icmp eq i64 %a, %b
  %2 = zext i1 %1 to i64
  ret i64 %2
}

define i64 @icmp_ne(i64 %a, i64 %b) nounwind {
; EBC-LABEL: icmp_ne:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r0, r0 (0,-16)
; EBC-NEXT:    push64 r1
; EBC-NEXT:    push64 r2
; EBC-NEXT:    movqw r7, r0 (0,32)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    moviww r7, 1
; EBC-NEXT:    cmp64eq r2, r1
; EBC-NEXT:    jmp64cc LBB1_2
; EBC-NEXT:  ; %bb.1:
; EBC-NEXT:    moviww r7, 0
; EBC-NEXT:  LBB1_2:
; EBC-NEXT:    pop64 r2
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    movqw r0, r0 (0,16)
; EBC-NEXT:    ret
  %1 = icmp ne i64 %a, %b
  %2 = zext i1 %1 to i64
  ret i64 %2
}

define i64 @icmp_ugt(i64 %a, i64 %b) nounwind {
; EBC-LABEL: icmp_ugt:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r0, r0 (0,-16)
; EBC-NEXT:    push64 r1
; EBC-NEXT:    push64 r2
; EBC-NEXT:    movqw r7, r0 (0,32)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    moviww r7, 1
; EBC-NEXT:    cmp64ulte r2, r1
; EBC-NEXT:    jmp64cc LBB2_2
; EBC-NEXT:  ; %bb.1:
; EBC-NEXT:    moviww r7, 0
; EBC-NEXT:  LBB2_2:
; EBC-NEXT:    pop64 r2
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    movqw r0, r0 (0,16)
; EBC-NEXT:    ret
  %1 = icmp ugt i64 %a, %b
  %2 = zext i1 %1 to i64
  ret i64 %2
}

define i64 @icmp_uge(i64 %a, i64 %b) nounwind {
; EBC-LABEL: icmp_uge:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r0, r0 (0,-16)
; EBC-NEXT:    push64 r1
; EBC-NEXT:    push64 r2
; EBC-NEXT:    movqw r7, r0 (0,32)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    moviww r7, 1
; EBC-NEXT:    cmp64ugte r2, r1
; EBC-NEXT:    jmp64cs LBB3_2
; EBC-NEXT:  ; %bb.1:
; EBC-NEXT:    moviww r7, 0
; EBC-NEXT:  LBB3_2:
; EBC-NEXT:    pop64 r2
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    movqw r0, r0 (0,16)
; EBC-NEXT:    ret
  %1 = icmp uge i64 %a, %b
  %2 = zext i1 %1 to i64
  ret i64 %2
}

define i64 @icmp_ult(i64 %a, i64 %b) nounwind {
; EBC-LABEL: icmp_ult:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r0, r0 (0,-16)
; EBC-NEXT:    push64 r1
; EBC-NEXT:    push64 r2
; EBC-NEXT:    movqw r7, r0 (0,32)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    moviww r7, 1
; EBC-NEXT:    cmp64ugte r2, r1
; EBC-NEXT:    jmp64cc LBB4_2
; EBC-NEXT:  ; %bb.1:
; EBC-NEXT:    moviww r7, 0
; EBC-NEXT:  LBB4_2:
; EBC-NEXT:    pop64 r2
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    movqw r0, r0 (0,16)
; EBC-NEXT:    ret
  %1 = icmp ult i64 %a, %b
  %2 = zext i1 %1 to i64
  ret i64 %2
}

define i64 @icmp_ule(i64 %a, i64 %b) nounwind {
; EBC-LABEL: icmp_ule:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r0, r0 (0,-16)
; EBC-NEXT:    push64 r1
; EBC-NEXT:    push64 r2
; EBC-NEXT:    movqw r7, r0 (0,32)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    moviww r7, 1
; EBC-NEXT:    cmp64ulte r2, r1
; EBC-NEXT:    jmp64cs LBB5_2
; EBC-NEXT:  ; %bb.1:
; EBC-NEXT:    moviww r7, 0
; EBC-NEXT:  LBB5_2:
; EBC-NEXT:    pop64 r2
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    movqw r0, r0 (0,16)
; EBC-NEXT:    ret
  %1 = icmp ule i64 %a, %b
  %2 = zext i1 %1 to i64
  ret i64 %2
}

define i64 @icmp_sgt(i64 %a, i64 %b) nounwind {
; EBC-LABEL: icmp_sgt:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r0, r0 (0,-16)
; EBC-NEXT:    push64 r1
; EBC-NEXT:    push64 r2
; EBC-NEXT:    movqw r7, r0 (0,32)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    moviww r7, 1
; EBC-NEXT:    cmp64lte r2, r1
; EBC-NEXT:    jmp64cc LBB6_2
; EBC-NEXT:  ; %bb.1:
; EBC-NEXT:    moviww r7, 0
; EBC-NEXT:  LBB6_2:
; EBC-NEXT:    pop64 r2
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    movqw r0, r0 (0,16)
; EBC-NEXT:    ret
  %1 = icmp sgt i64 %a, %b
  %2 = zext i1 %1 to i64
  ret i64 %2
}

define i64 @icmp_sge(i64 %a, i64 %b) nounwind {
; EBC-LABEL: icmp_sge:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r0, r0 (0,-16)
; EBC-NEXT:    push64 r1
; EBC-NEXT:    push64 r2
; EBC-NEXT:    movqw r7, r0 (0,32)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    moviww r7, 1
; EBC-NEXT:    cmp64gte r2, r1
; EBC-NEXT:    jmp64cs LBB7_2
; EBC-NEXT:  ; %bb.1:
; EBC-NEXT:    moviww r7, 0
; EBC-NEXT:  LBB7_2:
; EBC-NEXT:    pop64 r2
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    movqw r0, r0 (0,16)
; EBC-NEXT:    ret
  %1 = icmp sge i64 %a, %b
  %2 = zext i1 %1 to i64
  ret i64 %2
}

define i64 @icmp_slt(i64 %a, i64 %b) nounwind {
; EBC-LABEL: icmp_slt:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r0, r0 (0,-16)
; EBC-NEXT:    push64 r1
; EBC-NEXT:    push64 r2
; EBC-NEXT:    movqw r7, r0 (0,32)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    moviww r7, 1
; EBC-NEXT:    cmp64gte r2, r1
; EBC-NEXT:    jmp64cc LBB8_2
; EBC-NEXT:  ; %bb.1:
; EBC-NEXT:    moviww r7, 0
; EBC-NEXT:  LBB8_2:
; EBC-NEXT:    pop64 r2
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    movqw r0, r0 (0,16)
; EBC-NEXT:    ret
  %1 = icmp slt i64 %a, %b
  %2 = zext i1 %1 to i64
  ret i64 %2
}

define i64 @icmp_sle(i64 %a, i64 %b) nounwind {
; EBC-LABEL: icmp_sle:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r0, r0 (0,-16)
; EBC-NEXT:    push64 r1
; EBC-NEXT:    push64 r2
; EBC-NEXT:    movqw r7, r0 (0,32)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    moviww r7, 1
; EBC-NEXT:    cmp64lte r2, r1
; EBC-NEXT:    jmp64cs LBB9_2
; EBC-NEXT:  ; %bb.1:
; EBC-NEXT:    moviww r7, 0
; EBC-NEXT:  LBB9_2:
; EBC-NEXT:    pop64 r2
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    movqw r0, r0 (0,16)
; EBC-NEXT:    ret
  %1 = icmp sle i64 %a, %b
  %2 = zext i1 %1 to i64
  ret i64 %2
}
