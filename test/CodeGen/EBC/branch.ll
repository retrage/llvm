; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=ebc -verify-machineinstrs < %s \
; RUN:  | FileCheck %s -check-prefix=EBC

define void @foo(i64 %a, i64 *%b, i1 %c) {
; EBC-LABEL: foo:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r0, r0 (0,-32)
; EBC-NEXT:    push64 r1
; EBC-NEXT:    push64 r2
; EBC-NEXT:    push64 r3
; EBC-NEXT:    movqw r1, r0 (0,56)
; EBC-NEXT:    movqw r7, r0 (0,40)
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    movqw r7, r0 (0,48)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    movqq r3, @r7
; EBC-NEXT:    cmp64eq r3, r2
; EBC-NEXT:    jmp64cs LBB0_12
; EBC-NEXT:  ; %bb.1: ; %test2
; EBC-NEXT:    movqq r3, @r7
; EBC-NEXT:    cmp64eq r3, r2
; EBC-NEXT:    jmp64cc LBB0_12
; EBC-NEXT:  ; %bb.2: ; %test3
; EBC-NEXT:    movqq r3, @r7
; EBC-NEXT:    cmp64lte r3, r2
; EBC-NEXT:    jmp64cc LBB0_12
; EBC-NEXT:  ; %bb.3: ; %test4
; EBC-NEXT:    movqq r3, @r7
; EBC-NEXT:    cmp64gte r3, r2
; EBC-NEXT:    jmp64cs LBB0_12
; EBC-NEXT:  ; %bb.4: ; %test5
; EBC-NEXT:    movqq r3, @r7
; EBC-NEXT:    cmp64gte r3, r2
; EBC-NEXT:    jmp64cc LBB0_12
; EBC-NEXT:  ; %bb.5: ; %test6
; EBC-NEXT:    movqq r3, @r7
; EBC-NEXT:    cmp64lte r3, r2
; EBC-NEXT:    jmp64cs LBB0_12
; EBC-NEXT:  ; %bb.6: ; %test7
; EBC-NEXT:    movqq r3, @r7
; EBC-NEXT:    cmp64ulte r3, r2
; EBC-NEXT:    jmp64cc LBB0_12
; EBC-NEXT:  ; %bb.7: ; %test8
; EBC-NEXT:    movqq r3, @r7
; EBC-NEXT:    cmp64ugte r3, r2
; EBC-NEXT:    jmp64cs LBB0_12
; EBC-NEXT:  ; %bb.8: ; %test9
; EBC-NEXT:    movqq r3, @r7
; EBC-NEXT:    cmp64ugte r3, r2
; EBC-NEXT:    jmp64cc LBB0_12
; EBC-NEXT:  ; %bb.9: ; %test10
; EBC-NEXT:    movqq r3, @r7
; EBC-NEXT:    cmp64ulte r3, r2
; EBC-NEXT:    jmp64cs LBB0_12
; EBC-NEXT:  ; %bb.10: ; %test11
; EBC-NEXT:    movqq r1, @r1
; EBC-NEXT:    movqq r2, @r7
; EBC-NEXT:    moviww r2, 1
; EBC-NEXT:    and64 r1, r2
; EBC-NEXT:    moviww r2, 0
; EBC-NEXT:    cmp64eq r1, r2
; EBC-NEXT:    jmp64cc LBB0_12
; EBC-NEXT:  ; %bb.11: ; %test12
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:  LBB0_12: ; %end
; EBC-NEXT:    pop64 r3
; EBC-NEXT:    pop64 r2
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    movqw r0, r0 (0,32)
; EBC-NEXT:    ret
  %val1 = load volatile i64, i64* %b
  %tst1 = icmp eq i64 %val1, %a
  br i1 %tst1, label %end, label %test2

test2:
  %val2 = load volatile i64, i64* %b
  %tst2 = icmp ne i64 %val2, %a
  br i1 %tst2, label %end, label %test3

test3:
  %val3 = load volatile i64, i64* %b
  %tst3 = icmp sgt i64 %val3, %a
  br i1 %tst3, label %end, label %test4

test4:
  %val4 = load volatile i64, i64* %b
  %tst4 = icmp sge i64 %val4, %a
  br i1 %tst4, label %end, label %test5

test5:
  %val5 = load volatile i64, i64* %b
  %tst5 = icmp slt i64 %val5, %a
  br i1 %tst5, label %end, label %test6

test6:
  %val6 = load volatile i64, i64* %b
  %tst6 = icmp sle i64 %val6, %a
  br i1 %tst6, label %end, label %test7

test7:
  %val7 = load volatile i64, i64* %b
  %tst7 = icmp ugt i64 %val7, %a
  br i1 %tst7, label %end, label %test8

test8:
  %val8 = load volatile i64, i64* %b
  %tst8 = icmp uge i64 %val8, %a
  br i1 %tst8, label %end, label %test9

test9:
  %val9 = load volatile i64, i64* %b
  %tst9 = icmp ult i64 %val9, %a
  br i1 %tst9, label %end, label %test10

test10:
  %val10 = load volatile i64, i64* %b
  %tst10 = icmp ule i64 %val10, %a
  br i1 %tst10, label %end, label %test11

test11:
  %val11 = load volatile i64, i64* %b
  br i1 %c, label %end, label %test12

test12:
  %val12 = load volatile i64, i64* %b
  br label %end

end:
  ret void
}
