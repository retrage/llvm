; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=ebc -verify-machineinstrs < %s \
; RUN:  | FileCheck -check-prefix=EBC %s

define i64 @contraint_r(i64 %a) {
; EBC-LABEL: contraint_r:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r7, r0 (0,8)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    ;APP
; EBC-NEXT:    add32 @r7, @r7 (1,2)
; EBC-NEXT:    ;NO_APP
; EBC-NEXT:    ret
  %1 = tail call i64 asm "add32 @$0, @$1 (1,2)", "=r,r"(i64 %a)
  ret i64 %1
}

define i64 @constraint_i() {
; EBC-LABEL: constraint_i:
; EBC:       ; %bb.0:
; EBC-NEXT:    ;APP
; EBC-NEXT:    movibw r7, 113
; EBC-NEXT:    ;NO_APP
; EBC-NEXT:    ret
  %1 = tail call i64 asm "movibw $0, $1", "=r,i"(i16 113)
  ret i64 %1
}

define void @contraint_m(i64* %a) {
; EBC-LABEL: contraint_m:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r7, r0 (0,8)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    ;APP
; EBC-NEXT:    ;NO_APP
; EBC-NEXT:    ret
  call void asm sideeffect "", "=*m"(i64* %a)
  ret void
}

define i64 @constraint_m2(i64* %a) {
; EBC-LABEL: constraint_m2:
; EBC:       ; %bb.0:
; EBC-NEXT:    movqw r7, r0 (0,8)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    ;APP
; EBC-NEXT:    movqq r7, r7
; EBC-NEXT:    ;NO_APP
; EBC-NEXT:    ret
  %1 = tail call i64 asm "movqq $0, $1", "=r,*m"(i64* %a) nounwind
  ret i64 %1
}

; TODO: expend tests for more complex constraints, out of range immediates etc
