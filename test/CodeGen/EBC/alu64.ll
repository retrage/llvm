; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=ebc -verify-machineinstrs < %s \
; RUN:  | FileCheck %s -check-prefix=EBC

; Register-register instructions

define i64 @add(i64 %a, i64 %b) nounwind {
; EBC-LABEL: add:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    add64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, %b
  ret i64 %1
}

define i64 @sub(i64 %a, i64 %b) nounwind {
; EBC-LABEL: sub:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    sub64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = sub i64 %a, %b
  ret i64 %1
}

define i64 @mul(i64 %a, i64 %b) nounwind {
; EBC-LABEL: mul:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    mul64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = mul i64 %a, %b
  ret i64 %1
}

define i64 @sdiv(i64 %a, i64 %b) nounwind {
; EBC-LABEL: sdiv:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    div64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = sdiv i64 %a, %b
  ret i64 %1
}

define i64 @udiv(i64 %a, i64 %b) nounwind {
; EBC-LABEL: udiv:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    divu64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = udiv i64 %a, %b
  ret i64 %1
}

define i64 @srem(i64 %a, i64 %b) nounwind {
; EBC-LABEL: srem:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    div64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = sdiv i64 %a, %b
  ret i64 %1
}

define i64 @urem(i64 %a, i64 %b) nounwind {
; EBC-LABEL: urem:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    divu64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = udiv i64 %a, %b
  ret i64 %1
}

define i64 @shl(i64 %a, i64 %b) nounwind {
; EBC-LABEL: shl:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    shl64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = shl i64 %a, %b
  ret i64 %1
}

define i64 @lshr(i64 %a, i64 %b) nounwind {
; EBC-LABEL: lshr:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    shr64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = lshr i64 %a, %b
  ret i64 %1
}

define i64 @ashr(i64 %a, i64 %b) nounwind {
; EBC-LABEL: ashr:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    ashr64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = ashr i64 %a, %b
  ret i64 %1
}

define i64 @and(i64 %a, i64 %b) nounwind {
; EBC-LABEL: and:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    and64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = and i64 %a, %b
  ret i64 %1
}

define i64 @or(i64 %a, i64 %b) nounwind {
; EBC-LABEL: or:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    or64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = or i64 %a, %b
  ret i64 %1
}

define i64 @xor(i64 %a, i64 %b) nounwind {
; EBC-LABEL: xor:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    or64 r7, r1
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = or i64 %a, %b
  ret i64 %1
}

define i64 @add_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: add_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    add64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = add i64 %b, %1
  ret i64 %2
}

define i64 @sub_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: sub_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    sub64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = sub i64 %b, %1
  ret i64 %2
}

define i64 @mul_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: mul_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    mul64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = mul i64 %b, %1
  ret i64 %2
}

define i64 @sdiv_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: sdiv_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    div64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = sdiv i64 %b, %1
  ret i64 %2
}

define i64 @udiv_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: udiv_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    divu64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = udiv i64 %b, %1
  ret i64 %2
}

define i64 @srem_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: srem_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    mod64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = srem i64 %b, %1
  ret i64 %2
}

define i64 @urem_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: urem_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    modu64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = urem i64 %b, %1
  ret i64 %2
}

define i64 @shl_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: shl_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    shl64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = shl i64 %b, %1
  ret i64 %2
}

define i64 @lshr_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: lshr_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    shr64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = lshr i64 %b, %1
  ret i64 %2
}

define i64 @ashr_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: ashr_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    ashr64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = ashr i64 %b, %1
  ret i64 %2
}

define i64 @and_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: and_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    and64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = and i64 %b, %1
  ret i64 %2
}

define i64 @or_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: or_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    or64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = or i64 %b, %1
  ret i64 %2
}

define i64 @xor_imm(i64 %a, i64 %b) nounwind {
; EBC-LABEL: xor_imm:
; EBC:       ; %bb.0:
; EBC-NEXT:    push64 r1
; EBC-NEXT:    movqw r7, r0 (0,16)
; EBC-NEXT:    movqq r1, @r7
; EBC-NEXT:    movqw r7, r0 (0,24)
; EBC-NEXT:    movqq r7, @r7
; EBC-NEXT:    xor64 r7, r1 1024
; EBC-NEXT:    pop64 r1
; EBC-NEXT:    ret
  %1 = add i64 %a, 1024
  %2 = xor i64 %b, %1
  ret i64 %2
}
